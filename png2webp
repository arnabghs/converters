#!/bin/bash

# Check if required parameters are provided
if [ -z "$1" ] || [ -z "$2" ]; then
    echo "‚ùå Usage: $0 <arch> <zip_file>"
    echo "   arch can be 'x86' or 'ARM'"
    exit 1
fi

ARCH="$1"
INPUT_ZIP="$2"

# Get the directory containing the zip file
ZIP_DIR=$(dirname "$INPUT_ZIP")

# Extract the base ID from the filename (e.g., 'DES0001' from 'DES0001-20250903T205850Z-1-001.zip')
ZIP_NAME=$(basename "$INPUT_ZIP")
BASE_ID=$(echo "$ZIP_NAME" | cut -d'-' -f1)

# Set output folder using just the base ID
OUTPUT_FOLDER="$ZIP_DIR/$BASE_ID"

# Validate architecture
if [ "$ARCH" != "x86" ] && [ "$ARCH" != "ARM" ]; then
    echo "‚ùå Error: Architecture must be either 'x86' or 'ARM'"
    exit 1
fi

# Check if input zip file exists
if [ ! -f "$INPUT_ZIP" ]; then
    echo "‚ùå Error: Zip file '$INPUT_ZIP' does not exist."
    exit 1
fi

# Create temp directory for unzipping
TEMP_DIR=$(mktemp -d)
echo "üì¶ Unzipping files to temporary directory..."

# Unzip the file
unzip -q "$INPUT_ZIP" -d "$TEMP_DIR" || {
    echo "‚ùå Error: Failed to unzip file"
    rm -rf "$TEMP_DIR"
    exit 1
}

# Create output folder if it doesn't exist
mkdir -p "$OUTPUT_FOLDER"

# Convert each PNG file in the temp directory
for file in "$TEMP_DIR"/**/*.png; do
    # Skip if no PNG files found
    [ -e "$file" ] || { echo "‚ö†Ô∏è No PNG files found in $INPUT_FOLDER."; exit 0; }

    # Get the filename without extension
    filename=$(basename "$file" .png)

    # Set the appropriate libwebp path based on architecture
    if [ "$ARCH" = "x86" ]; then
        WEBP_PATH="x86/image/libwebp-1.5.0-mac-x86-64/bin/cwebp"
    else
        WEBP_PATH="ARM/image/libwebp-1.6.0-mac-arm64/bin/cwebp"
    fi

    # Convert to WEBP
    "$WEBP_PATH" "$file" -o "$OUTPUT_FOLDER/$filename.webp"
    echo "‚úÖ Converted: $file ‚Üí $OUTPUT_FOLDER/$filename.webp"
done

# Clean up temporary directory
rm -rf "$TEMP_DIR"
echo "üéâ All images converted and saved in: $OUTPUT_FOLDER"
